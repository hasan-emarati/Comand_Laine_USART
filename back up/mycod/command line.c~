/*******************************************************
This program was created by the
CodeWizardAVR V3.12 Advanced
Automatic Program Generator
© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com

Project : 
Version : 
Date    : 4/4/2022
Author  : 
Company : 
Comments: 


Chip type               : ATmega16
Program type            : Application
AVR Core Clock frequency: 16.000000 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 256
*******************************************************/

#include <mega16.h>

#include <delay.h>

// Alphanumeric LCD functions
#include <alcd.h>

// Declare your global variables here

#define DATA_REGISTER_EMPTY (1<<UDRE)
#define RX_COMPLETE (1<<RXC)
#define FRAMING_ERROR (1<<FE)
#define PARITY_ERROR (1<<UPE)
#define DATA_OVERRUN (1<<DOR)

// USART Receiver buffer
#define RX_BUFFER_SIZE 256
char rx_buffer[RX_BUFFER_SIZE];

#if RX_BUFFER_SIZE <= 256
unsigned char rx_wr_index=0,rx_rd_index=0;
#else
unsigned int rx_wr_index=0,rx_rd_index=0;
#endif

#if RX_BUFFER_SIZE < 256
unsigned char rx_counter=0;
#else
unsigned int rx_counter=0;
#endif

// This flag is set on USART Receiver buffer overflow
bit rx_buffer_overflow;

// USART Receiver interrupt service routine
interrupt [USART_RXC] void usart_rx_isr(void)
{
char status,data;
status=UCSRA;
data=UDR;
if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
   {
   rx_buffer[rx_wr_index++]=data;
#if RX_BUFFER_SIZE == 256
   // special case for receiver buffer size=256
   if (++rx_counter == 0) rx_buffer_overflow=1;
#else
   if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
   if (++rx_counter == RX_BUFFER_SIZE)
      {
      rx_counter=0;
      rx_buffer_overflow=1;
      }
#endif
   }
}

#ifndef _DEBUG_TERMINAL_IO_
// Get a character from the USART Receiver buffer
#define _ALTERNATE_GETCHAR_
#pragma used+
char getchar(void)
{
char data;
while (rx_counter==0);
data=rx_buffer[rx_rd_index++];
#if RX_BUFFER_SIZE != 256
if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
#endif
#asm("cli")
--rx_counter;
#asm("sei")
return data;
}
#pragma used-
#endif

// USART Transmitter buffer
#define TX_BUFFER_SIZE 256
char tx_buffer[TX_BUFFER_SIZE];

#if TX_BUFFER_SIZE <= 256
unsigned char tx_wr_index=0,tx_rd_index=0;
#else
unsigned int tx_wr_index=0,tx_rd_index=0;
#endif

#if TX_BUFFER_SIZE < 256
unsigned char tx_counter=0;
#else
unsigned int tx_counter=0;
#endif

// USART Transmitter interrupt service routine
interrupt [USART_TXC] void usart_tx_isr(void)
{
if (tx_counter)
   {
   --tx_counter;
   UDR=tx_buffer[tx_rd_index++];
#if TX_BUFFER_SIZE != 256
   if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
#endif
   }
}

#ifndef _DEBUG_TERMINAL_IO_
// Write a character to the USART Transmitter buffer
#define _ALTERNATE_PUTCHAR_
#pragma used+
void putchar(char c)
{
while (tx_counter == TX_BUFFER_SIZE);
#asm("cli")
if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
   {
   tx_buffer[tx_wr_index++]=c;
#if TX_BUFFER_SIZE != 256
   if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
#endif
   ++tx_counter;
   }
else
   UDR=c;
#asm("sei")
}
#pragma used-
#endif

// Standard Input/Output functions
#include <stdio.h>

// Voltage Reference: AREF pin
#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))

// Read the AD conversion result
unsigned int read_adc(unsigned char adc_input)
{
ADMUX=adc_input | ADC_VREF_TYPE;
// Delay needed for the stabilization of the ADC input voltage
delay_us(10);
// Start the AD conversion
ADCSRA|=(1<<ADSC);
// Wait for the AD conversion to complete
while ((ADCSRA & (1<<ADIF))==0);
ADCSRA|=(1<<ADIF);
return ADCW;
}

void main(void)
{
// Declare your local variables here
int temp0=0 , temp1=0 , temp2=0 , temp3=0 , temp4=0 , temp5=0 , temp6=0 , temp7=0 , ; // temp ADC
char A0[20] , A1[20] , A2[20] , A3[20] , A4[20] , A5[20] , A6[20] , A7[20] ; // Arayeh baray ADC
char lcd[256];
char getch;

// Input/Output Ports initialization
// Port A initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);

// Port B initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
// State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);

// Port C initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);

// Port D initialization
// Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In 
DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
// State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T 
PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);

// Timer/Counter 0 initialization
// Clock source: System Clock
// Clock value: Timer 0 Stopped
// Mode: Normal top=0xFF
// OC0 output: Disconnected
TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
TCNT0=0x00;
OCR0=0x00;

// Timer/Counter 1 initialization
// Clock source: System Clock
// Clock value: Timer1 Stopped
// Mode: Normal top=0xFFFF
// OC1A output: Disconnected
// OC1B output: Disconnected
// Noise Canceler: Off
// Input Capture on Falling Edge
// Timer1 Overflow Interrupt: Off
// Input Capture Interrupt: Off
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
TCNT1H=0x00;
TCNT1L=0x00;
ICR1H=0x00;
ICR1L=0x00;
OCR1AH=0x00;
OCR1AL=0x00;
OCR1BH=0x00;
OCR1BL=0x00;

// Timer/Counter 2 initialization
// Clock source: System Clock
// Clock value: Timer2 Stopped
// Mode: Normal top=0xFF
// OC2 output: Disconnected
ASSR=0<<AS2;
TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
TCNT2=0x00;
OCR2=0x00;

// Timer(s)/Counter(s) Interrupt(s) initialization
TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);

// External Interrupt(s) initialization
// INT0: Off
// INT1: Off
// INT2: Off
MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
MCUCSR=(0<<ISC2);

// USART initialization
// Communication Parameters: 8 Data, 1 Stop, No Parity
// USART Receiver: On
// USART Transmitter: On
// USART Mode: Asynchronous
// USART Baud Rate: 1200
UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
UCSRB=(1<<RXCIE) | (1<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
UBRRH=0x03;
UBRRL=0x40;

// Analog Comparator initialization
// Analog Comparator: Off
// The Analog Comparator's positive input is
// connected to the AIN0 pin
// The Analog Comparator's negative input is
// connected to the AIN1 pin
ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);

// ADC initialization
// ADC Clock frequency: 1000.000 kHz
// ADC Voltage Reference: AREF pin
// ADC Auto Trigger Source: ADC Stopped
ADMUX=ADC_VREF_TYPE;
ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);

// SPI initialization
// SPI disabled
SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);

// TWI initialization
// TWI disabled
TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);

// Alphanumeric LCD initialization
// Connections are specified in the
// Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
// RS - PORTC Bit 0
// RD - PORTC Bit 1
// EN - PORTC Bit 2
// D4 - PORTC Bit 3
// D5 - PORTC Bit 4
// D6 - PORTC Bit 5
// D7 - PORTC Bit 6
// Characters/line: 16
lcd_init(16);

// Global enable interrupts
#asm("sei")

while (1)
      {  
      getch=getchar();   
      if (getch==0X0D)
      {
      switch (getch)
               {
                case 'help':
					printf("\r\nhelp         :  Provides Help information for command LAnd commands.\r\nlog          :  syslog \r\nget port     : 	Set the base as output Example : get portA.0=1\r\nget pin      :  See the amount of inputs Example : get pinA.0\r\nset password :	Choose a password\r\nlcd_puts     : 	Show letters in LCD Example : lcd_puts(hello world)\r\nsysinfo      : 	system information\r\nRegister     :	pin or port\r\n"); 
                break;
                case 'syslog':
					printf("\r\nPassword : hasan126523515\r\nTimer/Counter 1 initialization\r\nClock source: System Clock\r\nClock value: Timer1 Stopped\r\nMode: Normal top=0xFFFF\r\nOC1A output: Disconnected\r\nOC1B output: Disconnected\r\nNoise Canceler: Off\r\nInput Capture on Falling Edge\r\nTimer1 Overflow Interrupt: Off\r\nInput Capture Interrupt: Off\r\nCompare A Match Interrupt: Off\r\nCompare B Match Interrupt: Off\r\nTimer/Counter 2 initialization\r\nClock source: System Clock\r\nClock value: Timer2 Stopped\r\nMode: Normal top=0xFF\r\nOC2 output: Disconnected\r\nrx_counter          : %d\r\nRX_BUFFER           : %d\r\nRX_BUFFER_SIZE      : %d\r\ntx_counter          : %d\r\ntx_rd_index         : %d\r\nFRAMING_ERROR       : %d\r\nPARITY_ERROR        : %d\r\nUDR                 : %d\r\n_DEBUG_TERMINAL_IO_ : %d" ,rx_counter , RX_BUFFER ,  RX_BUFFER_SIZE , tx_counter , tx_rd_index , FRAMING_ERROR , PARITY_ERROR , UDR , _DEBUG_TERMINAL_IO_);
			    break;
			    case 'get port':
					printf("\r\nget port \r\n         [ help | GROUP | VIEW | START | B.0=1]");	
				break;
				case 'get pin':
					printf("\r\nget pin \r\n         [ help | GROUP | VIEW | START | A.0=1]");		
				break;
				
				case 'get portB.0=1':
					PORTB.0=1;
				break;		
				case 'get portB.1=1':
					PORTB.1=1;
				break;		
				case 'get portB.2=1':
					PORTB.2=1;
				break;		
				case 'get portB.3=1':
					PORTB.3=1;
				break;		
				case 'get portB.4=1':
					PORTB.4=1;
				break;	
				case 'get portB.5=1':
					PORTB.5=1;
				break;	
				case 'get portB.6=1':
					PORTB.6=1;
				break;				
				case 'get portB.7=1':
					PORTB.7=1;
				break;
				
					// PORT == 0			
				
				case 'get portB.0=0':
					PORTB.0=0;
				break;		
				case 'get portB.1=0':
					PORTB.1=0;
				break;		
				case 'get portB.2=0':
					PORTB.2=0;
				break;		
				case 'get portB.3=0':
					PORTB.3=0;
				break;		
				case 'get portB.4=0':
					PORTB.4=0;
				break;		
				case 'get portB.5=0':
					PORTB.5=0;
				break;		
				case 'get portB.6=0':
					PORTB.6=0;
				break;				
				case 'get portB.7=0':
					PORTB.7=0;
				break;
				
				// END PORT
				// get pin
				
				case 'get pinA.0':
					temp0=read_adc(0);
					sprintf(A0 , "\r\nPINA.0 = %d \r\n" , temp0);
					printf(A0);
				break;
				case 'get pinA.1':
					temp1=read_adc(1);
					sprintf(A1 , "\r\nPINA.1 = %d \r\n" , temp1);
					printf(A1);
				break;
				case 'get pinA.2':
					temp2=read_adc(2);
					sprintf(A2 , "\r\nPINA.2 = %d \r\n" , temp2);
					printf(A2);
				break;
				case 'get pinA.3':
					temp3=read_adc(3);
					sprintf(A3 , "\r\nPINA.3 = %d \r\n" , temp3);
					printf(A3);
				break;
				case 'get pinA.4':
					temp4=read_adc(4);
					sprintf(A4 , "\r\nPINA.4 = %d \r\n" , temp4);
					printf(A4);
				break;
				case 'get pinA.5':
					temp5=read_adc(5);
					sprintf(A5 , "\r\nPINA.5 = %d \r\n" , temp5);
					printf(A5);
				break;
				case 'get pinA.6':
					temp6=read_adc(6);
					sprintf(A6 , "\r\nPINA.6 = %d \r\n" , temp6);
					printf(A6);
				break;
				case 'get pinA.7':
					temp7=read_adc(7);
					sprintf(A7 , "\r\nPINA.7 = %d \r\n" , temp7);
					printf(A7);
				break;
				
				// lcd flags
				
				case 'lcd_puts ':         // meghdar az karbar grefteh mishavad 
					
					printf("\r\nLCD : \r\n");
					lcd=getchar();
					lcd_puts(lcd);
					delay_ms(100);
					lcd_clear();
				break;
				case 'sysinfo';
					printf("\r\n/***************************************************************************************************\1235448 \r\nChip type               : ATmega16\r\nProgram type            : Application\r\nAVR Core Clock frequency: 1.000000 MHz\r\nMemory model            : Small\r\nExternal RAM size       : 0\r\nData Stack size         : 256\r\nUSART Baud Rate         : 1200\r\ncommand line virsion    : 1.1\r\n*********************************************************************************************************/\r\n");
				break;
				case 'Register':
					printf("\r\nPORT-A	:ADC\r\nPORT-B	:OUT\r\nPORT-C	:LCD-PINC.7=DEFULT\r\nPORT-D	:RXD-TXD-IN1-OC1\r\n");	
				break;
				case 'echo':
				printf("%d" , getch);	
				break;
                default: 
					printf("\r\ncommand not fuond\r\n");
               break;
			   
			   
               }
           }
      }
}
